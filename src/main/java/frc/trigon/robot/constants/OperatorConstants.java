package frc.trigon.robot.constants;

import edu.wpi.first.wpilibj.RobotController;
import edu.wpi.first.wpilibj2.command.button.Trigger;
import frc.trigon.robot.components.KeyboardController;
import frc.trigon.robot.components.XboxController;

public class OperatorConstants {
    private static final int
            DRIVER_CONTROLLER_PORT = 0;
    private static final int DRIVER_CONTROLLER_EXPONENT = 1;
    private static final double DRIVER_CONTROLLER_DEADBAND = 0.1;
    public static final XboxController DRIVER_CONTROLLER = new XboxController(
            DRIVER_CONTROLLER_PORT, DRIVER_CONTROLLER_EXPONENT, DRIVER_CONTROLLER_DEADBAND
    );
    public static final KeyboardController OPERATOR_CONTROLLER = new KeyboardController();

    public static final double
            POV_DIVIDER = 2,
            STICKS_SPEED_DIVIDER = 1;
    private static final double MINIMUM_SHIFT_VALUE = 0.18;
    public static final double MINIMUM_SHIFT_VALUE_COEFFICIENT = 1 - (1 / MINIMUM_SHIFT_VALUE);

    public static final Trigger
            SET_GRID_NUMBER_TO_1_TRIGGER = OPERATOR_CONTROLLER.numpad7(),
            SET_GRID_NUMBER_TO_2_TRIGGER = OPERATOR_CONTROLLER.numpad8(),
            SET_GRID_NUMBER_TO_3_TRIGGER = OPERATOR_CONTROLLER.numpad9(),
            SET_COLUMN_TO_LEFT_TRIGGER = OPERATOR_CONTROLLER.numpad4(),
            SET_COLUMN_TO_RIGHT_TRIGGER = OPERATOR_CONTROLLER.numpad6(),
            SET_LEVEL_TO_HIGH_TRIGGER = OPERATOR_CONTROLLER.numpad5(),
            SET_LEVEL_TO_MIDDLE_TRIGGER = OPERATOR_CONTROLLER.numpad2(),
            CONTINUE_TRIGGER = OPERATOR_CONTROLLER.k().or(DRIVER_CONTROLLER.leftBumper()),
            RESET_HEADING_TRIGGER = DRIVER_CONTROLLER.y(),
            PRELOAD_CURRENT_MATCH_START_AUTO_TRIGGER = OPERATOR_CONTROLLER.p(),
            TOGGLE_FIELD_AND_SHOOTER_RELATIVE_DRIVE_TRIGGER = DRIVER_CONTROLLER.b(),
            MANUAL_DRIVE_WITH_TURN_TO_COMMUNITY_TRIGGER = DRIVER_CONTROLLER.a(),
            MANUAL_DRIVE_WITH_TURN_TO_SHOOTING_ANGLE_TRIGGER = DRIVER_CONTROLLER.x(),
            STANDING_CONE_COLLECTION_TRIGGER = DRIVER_CONTROLLER.rightBumper(),
            NON_ASSISTED_CUBE_COLLECTION_TRIGGER = DRIVER_CONTROLLER.leftTrigger(),
            ASSISTED_CUBE_COLLECTION_TRIGGER = OPERATOR_CONTROLLER.a(),
            FULL_COLLECTION_FROM_LEFT_SUBSTATION_TRIGGER = OPERATOR_CONTROLLER.x(),
            FULL_COLLECTION_FROM_RIGHT_SUBSTATION_TRIGGER = OPERATOR_CONTROLLER.c(),
            FULL_CONE_PLACING_TRIGGER = OPERATOR_CONTROLLER.b(),
            FULL_CUBE_SHOOTING_TRIGGER = OPERATOR_CONTROLLER.v(),
            SHOOT_CUBE_TO_HIGH_LEVEL_TRIGGER = OPERATOR_CONTROLLER.y(),
            SHOOT_CUBE_TO_MIDDLE_LEVEL_TRIGGER = OPERATOR_CONTROLLER.h(),
            SHOOT_CUBE_TO_HYBRID_LEVEL_TRIGGER = OPERATOR_CONTROLLER.n(),
            PLACE_CONE_AT_HIGH_LEVEL_TRIGGER = OPERATOR_CONTROLLER.u(),
            PLACE_CONE_AT_MIDDLE_LEVEL_TRIGGER = OPERATOR_CONTROLLER.j(),
            PLACE_CONE_AT_HYBRID_LEVEL_TRIGGER = OPERATOR_CONTROLLER.m(),
            TOGGLE_BRAKE_MODE_TRIGGER = OPERATOR_CONTROLLER.g().or(RobotController::getUserButton),
            EJECT_TRIGGER = OPERATOR_CONTROLLER.backtick(),
            YELLOW_STATIC_COLOR_TRIGGER = OPERATOR_CONTROLLER.numpad3(),
            PURPLE_STATIC_COLOR_TRIGGER = OPERATOR_CONTROLLER.numpad1(),
            GO_TO_DASHBOARD_ARM_POSITION_TRIGGER = OPERATOR_CONTROLLER.f7(),
            COLLECT_TRIGGER = OPERATOR_CONTROLLER.q(),
            SECOND_CONTINUE_TRIGGER = OPERATOR_CONTROLLER.r(),
            COLLECT_FROM_SUBSTATION_TRIGGER = OPERATOR_CONTROLLER.e(),
            SHOOT_OVER_RAMP_TRIGGER = OPERATOR_CONTROLLER.w(),
            INCREMENT_ANGLE_TRIGGER = OPERATOR_CONTROLLER.left(),
            DECREMENT_ANGLE_TRIGGER = OPERATOR_CONTROLLER.right(),
            INCREMENT_ELEVATOR_POSITION_TRIGGER = OPERATOR_CONTROLLER.up(),
            DECREMENT_ELEVATOR_POSITION_TRIGGER = OPERATOR_CONTROLLER.down(),
            DRIVE_FROM_DPAD_TRIGGER = new Trigger(() -> DRIVER_CONTROLLER.getPov() != -1);
}
